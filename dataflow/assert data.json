{
	"name": "assert data",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText5",
						"type": "DatasetReference"
					},
					"name": "Employees"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText6",
						"type": "DatasetReference"
					},
					"name": "dep"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "assert1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "FilterData"
				}
			],
			"scriptLines": [
				"parameters{",
				"     parameter1 as string",
				"}",
				"source(output(",
				"          {emp id} as string,",
				"          {first name} as string,",
				"          {last name} as string,",
				"          doj as string,",
				"          depid as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Employees",
				"source(output(",
				"          depid as string,",
				"          depname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> dep",
				"Employees, dep assert(expectTrue(!isNull(toDate(doj,'yyyymmdd')), false, 'assertdoj', null, 'here we are checking doj'),",
				"     expectUnique({emp id}, false, 'empid', null, 'valid empid'),",
				"     expectExists(Employees@depid == dep@depid, false, 'assertDepExists')) ~> assert1",
				"assert1 derive(IsErrorRow = isError(),",
				"          IsIncorrectDepRow = hasError('assertDepExists')) ~> derivedColumn1",
				"derivedColumn1 filter(IsErrorRow == false()) ~> FilterData"
			]
		}
	}
}