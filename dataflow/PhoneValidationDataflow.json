{
	"name": "PhoneValidationDataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "HubSpot_LivewireDataSet",
						"type": "DatasetReference"
					},
					"name": "HubspotSource"
				},
				{
					"dataset": {
						"referenceName": "HubSpot_LivewireDataSet",
						"type": "DatasetReference"
					},
					"name": "LivewireSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "OutputValidatedPhoneData",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "joinTransformation"
				},
				{
					"name": "derivedColumnTransformation"
				},
				{
					"name": "selectTransformation"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as short,",
				"          NAME as string,",
				"          PHONE_NUMBER as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('hash', 1)) ~> HubspotSource",
				"source(output(",
				"          ID as short,",
				"          NAME as string,",
				"          PHONE_NUMBER as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> LivewireSource",
				"HubspotSource, LivewireSource join(HubspotSource@ID == LivewireSource@ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinTransformation",
				"joinTransformation derive(NewPhoneNumber = iif(isNull(HubspotSource@PHONE_NUMBER), LivewireSource@PHONE_NUMBER, HubspotSource@PHONE_NUMBER)) ~> derivedColumnTransformation",
				"derivedColumnTransformation select(mapColumn(",
				"          ID = HubspotSource@ID,",
				"          NAME = HubspotSource@NAME,",
				"          NewPhoneNumber",
				"     ),",
				"     partitionBy('hash', 1),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectTransformation",
				"selectTransformation sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}